# Este c√≥digo implementa la creaci√≥n y verificaci√≥n de tokens JWT (JSON Web Tokens) para autenticaci√≥n en aplicaciones web. Utiliza
# una clave secreta y el algoritmo HS256 para firmar los tokens. La funci√≥n create_access_token genera un token que incluye los datos
# proporcionados y una fecha de expiraci√≥n (por defecto, 5 minutos), mientras que verify_token intenta decodificar y validar el token
# recibido; si es v√°lido, devuelve su contenido, y si no, retorna None, lo que indica que el token es inv√°lido o ha expirado.

from datetime import datetime, timedelta
from jose import JWTError, jwt
import logging

logger = logging.getLogger(__name__)

# Clave secreta (reempl√°zala por algo seguro)
SECRET_KEY = "mi_clave_secreta_super_segura"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 5

def create_access_token(data: dict, expires_delta: timedelta = None):
    logger.info("üé´ Creando nuevo JWT token...")
    logger.info(f"üìã Datos para el token: {data}")

    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta if expires_delta else timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})

    logger.info(f"‚è∞ Token expirar√° el: {expire}")
    logger.info(f"‚è≥ Duraci√≥n del token: {ACCESS_TOKEN_EXPIRE_MINUTES} minutos")

    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

    logger.info(f"‚úÖ JWT creado exitosamente - Length: {len(encoded_jwt)}")
    logger.info(f"üîë Token preview: {encoded_jwt[:30]}...")

    return encoded_jwt

def verify_token(token: str):
    logger.info("üîç Verificando JWT token...")
    logger.info(f"üîë Token preview: {token[:30]}...")

    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        logger.info("‚úÖ JWT v√°lido - token decodificado exitosamente")
        logger.info(f"üë§ Usuario del token: {payload.get('sub', 'N/A')}")
        logger.info(f"‚è∞ Token expira: {datetime.fromtimestamp(payload.get('exp', 0))}")
        return payload
    except jwt.ExpiredSignatureError:
        logger.warning("‚è∞ JWT expirado - token ya no es v√°lido")
        return None
    except jwt.InvalidTokenError:
        logger.warning("‚ùå JWT inv√°lido - token malformado o corrupto")
        return None
    except JWTError as e:
        logger.error(f"üí• Error al verificar JWT: {str(e)}")
        return None